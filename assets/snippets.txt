	
	// CHECK FOR INTERNET CONNECTION
	
	private boolean isInternetAvailable() {
	    boolean wifiConnected = false;
	    boolean dataConnected = false;

	    ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
	    NetworkInfo[] netInfo = cm.getAllNetworkInfo();
	    for (NetworkInfo ni : netInfo) {
	        if (ni.getTypeName().equalsIgnoreCase("WIFI"))
	            if (ni.isConnected())
	            	wifiConnected = true;
	        if (ni.getTypeName().equalsIgnoreCase("MOBILE"))
	            if (ni.isConnected())
	            	dataConnected = true;
	    }
	    return wifiConnected || dataConnected;
	}


	// DATABASE BINDING
	
	private void bindDB(){
		
		db.open();
		db.drop();
		db.createTables();
		db.close();
		
		try {
			ArrayList<Student> students = JSONParser.parseStudent(getApplicationContext().getAssets().open("students.json"));
			db.open();
			for(Student s : students){
				db.addStudent(s);
			}
			db.close();
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		try {
			ArrayList<Question> questions = JSONParser.parseQuestion(getApplicationContext().getAssets().open("questions.json"));
			db.open();
			for(Question q : questions){
				db.addQuestion(q);
			}
			db.close();
			
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	// JSON PARSING
	
		private void bind(){
		try {
			Student.students = JSONParser.parseStudent(getApplicationContext().getAssets().open("students.json"));
			Question.questions = JSONParser.parseQuestion(getApplicationContext().getAssets().open("questions.json"));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	private void runCGM(){
		GCMRegistrar.checkDevice(this);
		GCMRegistrar.checkManifest(this);
		final String regId = GCMRegistrar.getRegistrationId(this);
		if (regId.equals("")) {
			String projectID = "996742667480";
			projectID = "576574596410";
			Toast.makeText(this, "not yet: " + GCMRegistrar.getRegistrationId(this), 5000).show();
		} else {
			Log.v("already", "Already registered");
			Toast.makeText(this, "registered: " + regId, 5000).show();
		}
	
		if(GCMRegistrar.isRegistered(this)) {
			Log.d("ALREADY REGISTERED: ", GCMRegistrar.getRegistrationId(this));
			Toast.makeText(this, "already", 5000).show();
		}else{
			String projectID = "996742667480";
			GCMRegistrar.register(this, projectID);
			Log.d("1st REGISTERED", GCMRegistrar.getRegistrationId(this));
			Toast.makeText(this, "registered", 5000).show();
		}
	}
	
	
	
			
		StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
		StrictMode.setThreadPolicy(policy); 
		
		SpreadsheetService myService = new SpreadsheetService("My Application");
		try {
			myService.setUserCredentials("nemoryoliver@gmail.com","DhjkLmnOP4");
		} catch (AuthenticationException e) {
			e.printStackTrace();
		}

		// Get a list of all entries
		URL metafeedUrl = null;
		try {
			metafeedUrl = new URL("http://spreadsheets.google.com/feeds/spreadsheets/private/full");
		} catch (MalformedURLException e) {
			e.printStackTrace();
		}

		SpreadsheetFeed resultFeed = null;
		try {
			resultFeed = myService.getFeed(metafeedUrl, SpreadsheetFeed.class);
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ServiceException e) {
			e.printStackTrace();
		}
		
		List<SpreadsheetEntry> entries = resultFeed.getEntries();

		String res = "";
		for (int i = 0; i < entries.size(); i++) {
			SpreadsheetEntry entry = entries.get(i);
			res += entry.getTitle().getPlainText() + "\n";
			
		}